#!/usr/bin/env python
# coding: utf-8

# In[11]:


import numpy as np
import xarray as xr

# Define the years and members
years = list(range(1993, 2017))
members = [f"Member {i}" for i in range(1, 16)]

# Define the data (each sublist corresponds to a year)
data_kenya = [
    [2.12, 2.19, 2.39, 1.74, 3.09, 2.39, 2.10, 3.07, 3.15, 3.35, 2.28, 1.61, 2.34, 2.49, 1.98],
    [5.23, 4.38, 3.16, 5.36, 3.43, 3.31, 3.35, 4.11, 4.73, 5.06, 5.93, 5.68, 4.33, 4.83, 3.72],
    [2.14, 2.59, 1.75, 2.53, 2.56, 2.31, 3.05, 2.01, 2.60, 2.59, 2.44, 3.24, 2.26, 2.81, 1.79],
    [1.38, 1.18, 1.34, 1.63, 1.60, 2.38, 1.97, 1.72, 1.92, 1.48, 1.83, 2.06, 0.83, 1.92, 3.23],
    [6.16, 4.13, 3.17, 3.64, 6.37, 5.55, 4.90, 5.04, 5.12, 5.77, 5.66, 4.91, 4.91, 4.35, 4.63],
    [2.36, 2.00, 1.84, 2.56, 2.83, 2.40, 1.93, 2.24, 1.90, 1.73, 1.87, 2.18, 1.91, 2.52, 2.13],
    [2.35, 1.66, 1.88, 1.70, 2.33, 1.47, 3.09, 2.41, 2.34, 2.40, 1.93, 2.45, 1.74, 1.80, 2.07],
    [2.05, 1.67, 1.42, 1.81, 2.73, 2.63, 3.17, 2.26, 3.15, 2.53, 1.59, 1.87, 2.18, 1.89, 1.68],
    [1.56, 1.87, 2.20, 2.66, 2.56, 1.31, 2.10, 2.45, 1.63, 2.95, 2.41, 2.74, 3.44, 1.32, 2.08],
    [3.23, 2.57, 3.15, 3.02, 3.50, 1.63, 2.87, 2.70, 2.55, 3.29, 2.58, 3.34, 4.09, 3.00, 2.75],
    [1.92, 3.16, 2.45, 2.89, 3.11, 2.26, 1.88, 2.60, 3.16, 1.94, 1.44, 2.50, 2.98, 3.63, 2.83],
    [2.64, 2.29, 3.96, 2.75, 2.62, 2.45, 2.72, 3.06, 3.26, 3.32, 2.31, 3.03, 2.20, 2.42, 1.82],
    [1.91, 2.49, 1.44, 2.49, 1.92, 2.65, 2.48, 1.65, 1.99, 1.72, 1.64, 2.32, 1.92, 2.50, 2.24],
    [5.11, 4.59, 2.44, 3.41, 3.39, 4.57, 4.33, 2.60, 3.81, 3.66, 4.17, 3.73, 3.95, 3.37, 4.16],
    [2.32, 1.89, 2.24, 2.11, 2.56, 3.56, 1.95, 3.10, 3.67, 1.81, 2.09, 3.00, 2.95, 2.22, 2.87],
    [3.13, 2.05, 2.07, 3.28, 2.45, 2.44, 1.65, 1.44, 2.22, 1.70, 2.92, 1.76, 1.62, 2.39, 2.10],
    [1.77, 2.94, 2.28, 2.27, 1.89, 3.56, 3.00, 2.28, 2.36, 2.71, 3.29, 3.50, 2.52, 2.26, 3.03],
    [1.93, 2.22, 2.30, 2.05, 1.70, 1.91, 2.58, 1.60, 2.05, 2.59, 1.95, 3.31, 2.35, 2.77, 2.50],
    [3.59, 2.75, 3.32, 2.28, 2.85, 3.42, 3.12, 2.78, 3.70, 5.07, 3.12, 3.07, 2.96, 2.90, 4.54],
    [2.01, 2.20, 4.59, 2.50, 2.62, 2.14, 3.01, 3.45, 2.58, 3.37, 3.08, 3.27, 3.26, 4.56, 3.35],
    [1.80, 2.76, 2.32, 2.20, 1.56, 1.95, 1.41, 1.90, 2.23, 2.21, 1.42, 1.47, 2.44, 2.05, 1.90],
    [2.29, 3.30, 2.90, 2.93, 2.68, 2.66, 2.34, 2.78, 3.45, 2.26, 1.82, 3.02, 3.04, 2.50, 2.09],
    [3.82, 3.31, 4.43, 3.68, 4.33, 3.44, 3.11, 4.43, 4.12, 4.07, 5.64, 4.91, 3.84, 5.01, 3.47],
    [1.91, 2.18, 1.96, 1.72, 2.22, 2.07, 2.17, 1.53, 2.56, 2.78, 2.42, 2.74, 1.44, 2.59, 2.71]
]
Chirps = [1.52, 2.93, 1.95, 1.51, 5.56, 1.33, 2.04, 2.34, 1.99, 2.95, 1.90, 2.40, 1.15, 4.31, 1.83, 1.98, 2.65, 1.55, 3.86, 2.72, 2.25, 2.31, 3.13, 1.70]


data_kenya_new = [
    [2.08, 2.44, 1.68, 3.23, 2.36, 2.10, 3.17, 3.24, 3.28, 2.30, 1.64, 2.25, 2.59, 1.89, 2.02],
    [4.22, 3.01, 5.50, 3.51, 3.16, 3.35, 4.09, 4.95, 5.11, 5.85, 5.67, 4.36, 4.82, 3.48, 3.40],
    [2.43, 1.68, 2.58, 2.38, 2.31, 2.97, 2.04, 2.71, 2.67, 2.36, 3.30, 2.27, 2.84, 1.59, 1.89],
    [1.12, 1.29, 1.56, 1.65, 2.21, 1.82, 1.72, 1.88, 1.54, 1.73, 2.01, 0.90, 1.93, 3.26, 2.78],
    [4.33, 2.84, 3.48, 6.38, 5.52, 4.97, 4.82, 5.24, 5.81, 5.48, 4.72, 4.74, 4.50, 4.68, 5.03],
    [2.16, 1.86, 2.93, 2.88, 2.50, 1.87, 2.29, 2.03, 1.45, 1.86, 2.01, 2.03, 2.50, 2.19, 1.56],
    [1.78, 1.72, 1.56, 2.23, 1.44, 3.18, 2.43, 2.26, 2.60, 1.92, 2.43, 1.65, 1.85, 2.14, 2.69],
    [1.67, 1.25, 1.83, 3.14, 2.61, 3.16, 2.22, 3.25, 2.47, 1.58, 1.58, 2.24, 2.05, 1.57, 2.85],
    [1.92, 2.14, 2.95, 2.70, 1.15, 1.84, 2.50, 1.55, 2.78, 2.31, 2.80, 3.45, 1.37, 2.05, 2.64],
    [2.65, 3.13, 3.00, 3.64, 1.45, 2.91, 2.75, 2.23, 3.23, 2.46, 3.30, 3.96, 2.89, 2.55, 1.54],
    [2.97, 2.47, 2.95, 2.94, 2.03, 1.66, 2.55, 3.29, 1.94, 1.46, 2.45, 2.95, 3.58, 2.74, 2.32],
    [2.27, 3.94, 2.64, 2.71, 2.33, 2.59, 3.14, 3.05, 3.29, 2.43, 2.87, 2.26, 2.47, 1.59, 3.58],
    [2.51, 1.63, 2.52, 1.88, 2.71, 2.49, 1.52, 2.05, 1.61, 1.68, 2.32, 1.86, 2.71, 2.18, 2.24],
    [4.85, 2.31, 3.27, 3.39, 4.42, 4.30, 2.63, 3.78, 3.75, 4.29, 3.73, 4.24, 3.49, 4.20, 4.79],
    [1.64, 2.18, 2.10, 2.47, 3.44, 2.05, 2.93, 3.56, 1.51, 1.99, 3.09, 2.91, 2.03, 2.93, 2.18],
    [2.06, 2.13, 3.37, 2.17, 2.45, 1.45, 1.42, 2.12, 1.60, 2.84, 1.74, 1.55, 2.35, 2.11, 2.46],
    [2.99, 2.20, 2.15, 1.79, 3.62, 2.80, 2.48, 2.44, 2.67, 3.26, 3.34, 2.71, 2.26, 2.91, 3.44],
    [2.13, 2.36, 2.00, 1.61, 2.05, 2.71, 1.54, 1.98, 2.66, 1.93, 3.45, 2.64, 2.81, 2.50, 2.59],
    [2.72, 3.51, 2.20, 2.94, 3.52, 2.84, 2.72, 3.88, 4.92, 3.35, 3.00, 2.92, 3.05, 4.53, 4.50],
    [2.12, 4.73, 2.09, 2.81, 2.04, 2.85, 3.34, 2.51, 3.31, 2.97, 3.61, 3.16, 4.61, 3.38, 1.70],
    [2.79, 2.47, 2.19, 1.44, 2.00, 1.31, 1.93, 1.98, 2.07, 1.33, 1.36, 2.42, 1.97, 2.03, 2.67],
    [3.44, 3.07, 2.75, 2.88, 2.53, 2.42, 2.66, 3.53, 2.26, 1.88, 3.19, 2.97, 2.29, 1.83, 2.33],
    [3.18, 4.39, 3.86, 4.26, 3.55, 2.98, 4.32, 4.22, 3.90, 5.91, 4.75, 3.75, 5.08, 3.47, 3.47],
    [2.42, 2.07, 1.61, 2.35, 1.99, 2.23, 1.23, 2.60, 3.05, 2.47, 2.84, 1.34, 2.76, 2.76, 2.21],
]

Chirps_Kenya = [1.68, 3.1, 2.04, 1.54, 5.85, 1.23, 2.17, 2.09, 2.04, 2.91, 1.92, 2.3, 1.1, 4.4, 1.75, 1.8, 2.57, 1.48, 3.68, 2.64, 2.07, 2.15, 3.09, 1.72]

Sudan = [
    [0.20, 0.11, 0.13, 0.13, 0.15, 0.09, 0.33, 0.13, 0.14, 0.30, 0.16, 0.09, 0.21, 0.28, 0.14],
    [0.39, 0.23, 0.23, 0.30, 0.22, 0.09, 0.19, 0.28, 0.18, 0.44, 0.33, 0.19, 0.27, 0.14, 0.27],
    [0.20, 0.22, 0.15, 0.20, 0.16, 0.26, 0.21, 0.09, 0.33, 0.13, 0.24, 0.23, 0.15, 0.23, 0.16],
    [0.20, 0.19, 0.17, 0.11, 0.30, 0.21, 0.10, 0.27, 0.30, 0.16, 0.05, 0.10, 0.19, 0.19, 0.16],
    [0.12, 0.09, 0.15, 0.44, 0.35, 0.46, 0.40, 0.23, 0.23, 0.13, 0.26, 0.28, 0.33, 0.24, 0.49],
    [0.18, 0.18, 0.12, 0.22, 0.20, 0.18, 0.14, 0.36, 0.20, 0.19, 0.24, 0.19, 0.28, 0.30, 0.19],
    [0.17, 0.26, 0.37, 0.32, 0.35, 0.27, 0.18, 0.24, 0.19, 0.22, 0.13, 0.25, 0.18, 0.20, 0.22],
    [0.16, 0.18, 0.25, 0.24, 0.25, 0.31, 0.19, 0.25, 0.16, 0.21, 0.17, 0.15, 0.27, 0.17, 0.26],
    [0.15, 0.12, 0.20, 0.21, 0.19, 0.20, 0.14, 0.19, 0.18, 0.29, 0.23, 0.19, 0.20, 0.23, 0.24],
    [0.33, 0.19, 0.29, 0.10, 0.10, 0.18, 0.16, 0.29, 0.13, 0.25, 0.33, 0.20, 0.14, 0.29, 0.22],
    [0.15, 0.22, 0.34, 0.23, 0.22, 0.21, 0.18, 0.11, 0.14, 0.21, 0.16, 0.25, 0.45, 0.14, 0.15],
    [0.25, 0.16, 0.28, 0.17, 0.22, 0.12, 0.24, 0.10, 0.37, 0.14, 0.13, 0.22, 0.25, 0.17, 0.20],
    [0.24, 0.22, 0.29, 0.16, 0.23, 0.28, 0.26, 0.26, 0.23, 0.35, 0.23, 0.16, 0.26, 0.18, 0.16],
    [0.44, 0.15, 0.23, 0.29, 0.29, 0.18, 0.22, 0.31, 0.15, 0.22, 0.16, 0.15, 0.17, 0.32, 0.32],
    [0.22, 0.25, 0.24, 0.22, 0.14, 0.27, 0.35, 0.24, 0.51, 0.13, 0.44, 0.15, 0.13, 0.29, 0.19],
    [0.16, 0.33, 0.25, 0.20, 0.18, 0.12, 0.20, 0.19, 0.16, 0.15, 0.20, 0.18, 0.29, 0.13, 0.18],
    [0.07, 0.31, 0.09, 0.15, 0.11, 0.21, 0.19, 0.28, 0.18, 0.12, 0.29, 0.27, 0.22, 0.12, 0.22],
    [0.39, 0.20, 0.51, 0.31, 0.28, 0.26, 0.19, 0.32, 0.37, 0.19, 0.17, 0.11, 0.43, 0.18, 0.19],
    [0.32, 0.13, 0.20, 0.33, 0.20, 0.24, 0.22, 0.13, 0.36, 0.17, 0.22, 0.38, 0.21, 0.13, 0.27],
    [0.13, 0.14, 0.26, 0.23, 0.15, 0.17, 0.16, 0.33, 0.24, 0.31, 0.13, 0.21, 0.49, 0.09, 0.29],
    [0.28, 0.25, 0.14, 0.23, 0.16, 0.22, 0.20, 0.19, 0.29, 0.20, 0.29, 0.28, 0.23, 0.24, 0.34],
    [0.20, 0.26, 0.16, 0.26, 0.17, 0.31, 0.13, 0.39, 0.23, 0.10, 0.19, 0.15, 0.14, 0.19, 0.19],
    [0.17, 0.31, 0.17, 0.39, 0.12, 0.12, 0.16, 0.27, 0.36, 0.20, 0.15, 0.27, 0.47, 0.15, 0.23],
    [0.18, 0.23, 0.10, 0.17, 0.17, 0.14, 0.09, 0.20, 0.24, 0.12, 0.14, 0.38, 0.19, 0.13, 0.16],
]

Chirps_Sudan = [0.16, 0.19, 0.18, 0.15, 0.3, 0.24, 0.33, 0.21, 0.14, 0.22, 0.18, 0.14, 0.1, 0.25, 0.13, 0.11, 0.1, 0.25, 0.15, 0.23, 0.08, 0.21, 0.25, 0.13]

Sudan_JJAS = [
    [1.12, 1.19, 0.89, 1.63, 1.70, 1.25, 1.30, 1.47, 1.43, 1.22, 1.48, 1.70, 1.51, 1.25, 1.08],
    [1.56, 1.20, 1.84, 1.60, 1.76, 2.19, 1.41, 1.93, 1.19, 1.71, 1.39, 1.60, 0.97, 1.95, 1.75],
    [1.83, 1.21, 1.63, 1.42, 1.34, 1.47, 2.31, 1.34, 2.48, 1.55, 1.40, 1.37, 1.65, 1.05, 1.21],
    [1.27, 1.82, 1.53, 1.70, 1.87, 1.44, 1.08, 1.59, 1.46, 2.04, 1.15, 1.75, 1.18, 1.43, 1.37],
    [1.62, 1.25, 1.71, 1.22, 1.47, 1.61, 1.53, 1.51, 1.37, 1.29, 1.60, 1.52, 1.05, 1.07, 1.36],
    [1.51, 2.06, 1.14, 1.70, 1.88, 1.71, 1.32, 2.23, 1.88, 1.33, 1.33, 1.89, 1.92, 1.42, 1.46],
    [1.24, 2.39, 2.34, 1.79, 2.04, 2.14, 1.72, 2.07, 1.80, 1.77, 2.20, 1.77, 1.79, 1.82, 1.77],
    [1.51, 1.98, 1.43, 1.77, 1.40, 1.62, 1.37, 1.53, 1.38, 1.98, 1.84, 1.57, 1.49, 1.65, 1.59],
    [1.28, 1.72, 2.11, 1.96, 1.24, 1.89, 1.44, 1.57, 1.47, 1.45, 2.08, 1.87, 1.50, 1.84, 1.74],
    [1.57, 1.34, 1.65, 1.69, 1.52, 1.03, 1.47, 1.30, 1.16, 1.54, 1.59, 1.47, 1.50, 1.50, 1.80],
    [1.35, 1.79, 2.28, 1.26, 1.33, 1.69, 1.84, 1.63, 1.50, 2.09, 1.38, 1.47, 1.77, 1.78, 1.99],
    [1.91, 2.06, 2.04, 1.56, 2.12, 1.81, 1.81, 1.69, 2.03, 1.78, 1.71, 1.36, 1.32, 1.93, 2.36],
    [1.88, 1.31, 1.61, 1.61, 1.48, 1.60, 1.59, 1.47, 1.80, 1.86, 1.40, 1.63, 1.66, 1.31, 1.95],
    [1.58, 1.86, 1.41, 1.56, 1.92, 1.36, 1.63, 1.41, 1.64, 1.50, 1.54, 1.62, 1.27, 1.42, 1.33],
    [1.63, 1.95, 1.81, 1.46, 1.53, 1.71, 1.68, 1.70, 1.73, 1.58, 2.08, 2.16, 1.46, 1.45, 1.64],
    [1.93, 1.33, 2.58, 2.16, 1.76, 1.63, 1.98, 1.56, 1.82, 1.75, 1.62, 1.37, 1.76, 1.81, 1.84],
    [1.27, 1.42, 1.77, 1.38, 2.01, 1.47, 1.80, 1.25, 1.34, 1.25, 1.56, 1.76, 1.13, 1.41, 1.46],
    [1.34, 1.73, 0.99, 1.18, 1.42, 1.50, 1.98, 1.46, 2.41, 1.47, 1.26, 1.62, 1.74, 1.91, 1.26],
    [1.62, 1.53, 1.77, 1.44, 1.73, 1.36, 2.17, 1.27, 1.39, 1.39, 1.47, 1.60, 1.31, 0.64, 1.01],
    [1.44, 1.59, 1.82, 1.58, 1.61, 1.99, 1.78, 2.10, 1.27, 1.49, 1.28, 1.58, 1.31, 1.69, 1.85],
    [1.52, 1.70, 1.29, 1.60, 1.37, 1.57, 1.89, 1.30, 1.05, 1.91, 1.31, 1.70, 1.26, 2.14, 1.39],
    [1.62, 1.63, 1.78, 1.48, 1.70, 1.20, 1.25, 1.90, 1.64, 1.66, 2.42, 1.90, 1.37, 1.57, 0.88],
    [1.48, 1.53, 1.47, 1.49, 1.21, 0.76, 1.69, 0.81, 1.31, 1.79, 1.13, 2.02, 1.39, 1.21, 1.01],
    [1.89, 1.74, 1.39, 1.44, 1.10, 1.56, 1.18, 1.99, 2.19, 1.27, 1.91, 1.91, 2.27, 2.38, 1.65],
] #JJAS

Chirps_Sudan_JJAS = [2.01, 2.51, 2.53, 2.14, 2.37, 2.75, 2.76, 2.15, 2.27, 2.01, 2.53, 1.71, 2.26, 2.24, 2.89, 2.08, 1.93, 2.34, 1.91, 2.52, 2.38, 2.62, 2.09, 2.31] #JJAS

South_Sudan = [
    [1.77, 1.49, 1.78, 1.34, 1.70, 1.77, 2.53, 1.88, 1.55, 1.72, 0.90, 1.69, 1.96, 1.74, 1.76],
    [2.93, 2.38, 2.59, 2.35, 2.44, 1.17, 2.19, 2.35, 2.49, 2.92, 3.12, 2.47, 2.82, 2.14, 2.45],
    [2.32, 1.58, 2.38, 1.50, 2.20, 2.13, 1.44, 1.59, 2.16, 1.74, 2.41, 1.93, 2.31, 2.30, 1.56],
    [1.69, 1.45, 1.44, 1.20, 2.37, 1.79, 0.97, 1.61, 1.92, 1.67, 1.08, 0.79, 1.66, 1.92, 1.37],
    [1.58, 0.95, 1.33, 3.07, 2.64, 1.79, 2.55, 2.35, 2.63, 1.78, 2.48, 2.42, 1.84, 2.19, 2.21],
    [2.23, 2.00, 2.03, 2.79, 2.57, 2.05, 2.17, 2.15, 2.09, 2.41, 2.70, 2.49, 2.82, 2.16, 2.09],
    [1.52, 1.77, 2.73, 2.81, 2.65, 2.87, 2.18, 2.64, 2.02, 2.19, 2.10, 2.13, 1.52, 2.08, 2.66],
    [2.28, 1.60, 1.32, 1.69, 2.39, 1.87, 2.44, 2.02, 2.11, 1.93, 2.08, 1.54, 1.72, 1.66, 2.71],
    [1.71, 1.37, 2.45, 2.33, 1.55, 2.09, 2.25, 1.11, 1.93, 2.19, 2.87, 2.38, 1.58, 1.80, 2.57],
    [1.88, 1.63, 1.69, 1.53, 0.89, 1.81, 1.56, 2.35, 1.53, 1.92, 1.82, 2.76, 1.68, 1.96, 1.78],
    [2.61, 1.97, 2.37, 2.28, 2.42, 1.54, 2.19, 1.43, 1.68, 1.85, 2.03, 2.39, 3.65, 2.12, 1.42],
    [1.83, 1.91, 2.28, 1.69, 1.95, 2.01, 1.83, 1.36, 2.05, 1.42, 1.70, 1.88, 1.64, 1.12, 2.22],
    [2.22, 2.17, 1.88, 1.76, 1.81, 2.56, 2.09, 2.14, 1.63, 2.10, 1.98, 1.99, 2.22, 2.21, 1.70],
    [3.00, 1.66, 1.68, 2.10, 2.69, 2.11, 2.25, 3.35, 1.72, 2.36, 2.20, 2.32, 1.82, 2.20, 2.38],
    [1.67, 2.02, 2.65, 2.08, 2.01, 2.36, 2.25, 2.43, 1.83, 1.71, 3.40, 2.11, 2.04, 2.60, 2.03],
    [2.18, 1.85, 2.11, 2.12, 1.95, 0.96, 1.50, 2.04, 1.75, 2.03, 2.59, 1.88, 2.31, 1.49, 2.08],
    [1.46, 2.46, 1.33, 1.80, 1.57, 1.42, 1.56, 1.79, 2.07, 2.01, 2.58, 1.20, 1.61, 1.90, 1.84],
    [2.54, 2.33, 2.76, 2.52, 2.45, 2.41, 2.08, 2.88, 3.15, 2.42, 2.63, 2.15, 3.52, 2.27, 2.72],
    [3.01, 2.57, 1.93, 2.63, 2.67, 2.43, 2.08, 2.17, 3.01, 2.42, 2.25, 3.25, 1.49, 2.15, 2.60],
    [1.60, 2.20, 2.25, 2.21, 1.96, 1.87, 2.37, 2.25, 2.26, 2.18, 1.95, 2.38, 2.55, 2.01, 1.70],
    [2.16, 2.04, 1.74, 2.13, 1.80, 1.81, 1.77, 2.11, 2.51, 1.42, 2.66, 1.94, 1.76, 1.76, 2.72],
    [1.45, 2.18, 1.27, 2.53, 2.29, 2.40, 1.59, 2.39, 1.82, 1.27, 2.08, 1.99, 1.61, 1.80, 1.74],
    [2.07, 2.50, 1.96, 2.65, 1.52, 2.08, 2.00, 1.90, 2.02, 2.26, 2.43, 2.30, 3.57, 2.41, 2.35],
    [1.45, 1.79, 1.46, 2.12, 1.28, 1.35, 0.97, 1.85, 1.74, 1.43, 2.02, 2.34, 2.37, 1.71, 1.24],
]

South_Sudan_JJAS = [
    [3.92, 4.02, 3.60, 4.02, 4.16, 4.19, 4.19, 4.07, 4.04, 4.06, 4.31, 4.20, 4.00, 4.34, 3.74],
    [4.15, 3.94, 4.27, 4.03, 4.56, 4.78, 3.99, 4.99, 3.94, 4.66, 4.04, 4.59, 4.15, 4.86, 4.78],
    [5.23, 4.27, 4.63, 4.51, 4.36, 4.12, 5.54, 3.82, 4.46, 4.14, 4.44, 4.69, 4.60, 3.77, 3.99],
    [4.38, 4.46, 4.13, 4.80, 4.60, 4.12, 4.15, 4.46, 4.08, 4.52, 4.17, 4.61, 4.23, 4.44, 3.82],
    [4.56, 3.78, 3.92, 3.67, 3.99, 4.40, 4.21, 3.94, 3.89, 3.58, 3.90, 4.23, 3.49, 3.60, 3.64],
    [4.48, 4.55, 3.95, 4.50, 4.73, 4.89, 4.33, 4.42, 4.72, 4.34, 4.11, 4.80, 5.12, 4.18, 4.22],
    [4.48, 5.20, 5.45, 4.44, 5.04, 4.90, 4.44, 5.25, 4.68, 4.59, 4.64, 5.07, 4.59, 5.12, 4.20],
    [4.40, 4.92, 4.16, 4.75, 4.17, 4.21, 3.95, 4.18, 4.03, 4.38, 4.57, 4.38, 4.35, 4.41, 4.25],
    [3.55, 4.17, 4.28, 4.62, 4.28, 4.35, 3.96, 4.38, 4.34, 4.20, 4.63, 4.91, 4.38, 4.53, 4.37],
    [4.52, 4.19, 4.51, 4.34, 4.16, 4.09, 4.07, 3.84, 4.23, 4.59, 4.52, 3.97, 4.36, 4.30, 4.51],
    [4.13, 5.00, 5.32, 4.08, 4.28, 4.92, 4.59, 4.60, 4.01, 4.62, 4.03, 4.34, 4.85, 4.65, 4.92],
    [4.68, 5.24, 5.19, 4.39, 4.75, 4.72, 5.01, 4.50, 4.88, 4.88, 4.81, 4.79, 4.03, 5.28, 5.06],
    [4.95, 4.35, 4.61, 4.72, 4.53, 4.27, 4.45, 3.94, 5.03, 4.71, 4.50, 4.08, 4.47, 3.98, 4.56],
    [4.29, 4.62, 4.47, 4.31, 5.17, 3.92, 4.29, 4.64, 4.14, 4.33, 4.84, 4.21, 4.22, 3.85, 3.77],
    [4.47, 4.95, 4.43, 4.18, 4.58, 4.69, 4.89, 4.74, 4.62, 5.09, 5.06, 5.24, 4.36, 4.08, 4.64],
    [4.78, 4.40, 5.05, 4.63, 4.77, 4.59, 4.93, 4.26, 4.30, 4.04, 4.29, 4.02, 4.63, 4.53, 4.39],
    [4.08, 4.29, 4.64, 3.93, 4.84, 4.44, 4.25, 3.96, 3.66, 3.96, 4.34, 4.76, 3.67, 3.88, 3.96],
    [4.42, 4.49, 3.79, 3.53, 4.06, 4.45, 4.96, 3.97, 5.24, 4.71, 4.38, 4.50, 4.27, 4.58, 4.24],
    [4.35, 4.57, 4.46, 4.43, 4.46, 4.07, 5.06, 4.56, 4.32, 4.35, 4.64, 4.29, 4.18, 3.07, 3.82],
    [4.60, 4.37, 4.23, 4.35, 4.53, 5.14, 4.63, 4.33, 4.05, 4.57, 4.18, 4.41, 3.95, 4.85, 4.48],
    [4.35, 4.60, 4.03, 4.07, 4.14, 4.59, 4.66, 4.02, 3.96, 4.50, 3.92, 4.97, 4.44, 4.87, 4.34],
    [4.59, 4.99, 4.46, 4.56, 4.91, 4.14, 3.84, 4.71, 4.59, 4.22, 5.16, 5.13, 4.15, 4.38, 3.74],
    [3.98, 3.96, 3.98, 3.86, 4.20, 3.12, 4.04, 3.22, 4.21, 4.41, 3.88, 4.69, 3.72, 4.02, 3.53],
    [4.83, 4.92, 4.53, 4.53, 4.16, 4.63, 4.58, 4.80, 4.80, 4.45, 4.82, 5.10, 5.23, 5.12, 4.68],
]



Chirps_South_Sudan= [1.35, 1.89, 1.5, 1.14, 2.4, 1.8, 1.7, 1.5, 1.44, 1.89, 1.91, 1.29, 1.03, 1.62, 1.46, 1.29, 1.31, 1.59, 1.53, 1.97, 1.55, 1.61, 1.91, 1.17]

Chirps_South_Sudan_JJAS = [6.17, 6.74, 6.51, 6.9, 6.41, 7.22, 7.06, 6.71, 6.77, 6.0, 6.99, 5.87, 6.41, 6.75, 7.17, 6.66, 5.63, 6.67, 6.6, 7.19, 6.85, 6.34, 5.99, 6.14]

Rwanda = [
    [4.57, 5.38, 5.39, 4.38, 3.48, 4.41, 5.86, 4.93, 4.58, 4.01, 3.78, 5.62, 3.61, 5.78, 4.19],
    [4.32, 4.49, 5.54, 5.28, 4.36, 4.76, 6.74, 4.79, 6.47, 6.20, 4.83, 5.83, 5.94, 5.50, 5.09],
    [6.80, 4.04, 5.95, 5.58, 4.47, 4.37, 4.59, 4.00, 4.00, 3.80, 7.41, 4.90, 5.58, 5.10, 3.51],
    [5.14, 3.04, 4.79, 3.93, 5.75, 4.02, 3.66, 4.83, 3.23, 4.11, 4.59, 3.34, 2.79, 4.09, 4.70],
    [5.83, 4.57, 4.63, 5.95, 4.55, 4.05, 5.23, 5.33, 4.07, 3.66, 4.58, 4.68, 5.31, 3.55, 6.12],
    [6.33, 5.02, 6.57, 4.97, 5.37, 4.01, 4.62, 5.99, 3.62, 5.98, 5.25, 4.70, 6.27, 4.43, 4.80],
    [4.62, 5.24, 4.94, 5.35, 5.20, 4.43, 5.08, 5.20, 4.75, 4.90, 4.42, 4.70, 4.89, 4.92, 5.16],
    [3.47, 4.76, 4.38, 5.20, 4.89, 4.66, 6.08, 6.15, 5.06, 4.22, 2.94, 4.83, 5.46, 5.00, 4.78],
    [3.46, 5.41, 4.56, 3.63, 5.02, 4.29, 6.02, 3.28, 4.68, 5.75, 4.81, 5.95, 5.05, 4.49, 4.61],
    [4.38, 4.67, 6.14, 4.78, 3.27, 5.37, 4.62, 4.95, 5.47, 4.15, 5.27, 6.72, 5.70, 5.02, 3.58],
    [5.53, 4.03, 4.25, 5.57, 4.96, 5.09, 4.48, 4.84, 2.95, 4.42, 4.34, 5.07, 6.80, 4.12, 5.61],
    [4.05, 6.15, 5.71, 3.90, 5.13, 5.24, 4.96, 4.34, 4.98, 4.37, 5.59, 3.40, 5.90, 4.94, 5.83],
    [4.83, 5.40, 3.69, 4.51, 3.60, 5.66, 3.68, 5.99, 4.95, 3.53, 4.35, 4.49, 3.48, 4.46, 4.57],
    [4.30, 4.03, 6.06, 4.82, 5.74, 6.23, 3.66, 6.29, 5.24, 4.61, 5.00, 5.32, 4.00, 5.94, 4.10],
    [4.09, 5.41, 6.23, 4.61, 5.45, 5.18, 5.93, 6.09, 4.35, 6.13, 6.04, 5.05, 5.37, 4.23, 4.90],
    [5.75, 5.20, 5.44, 5.61, 5.21, 4.12, 3.11, 4.89, 4.11, 5.38, 5.05, 5.21, 4.45, 3.85, 4.93],
    [5.40, 4.53, 5.48, 4.93, 4.86, 5.19, 4.98, 3.37, 5.49, 6.50, 4.95, 3.17, 3.48, 5.06, 4.65],
    [5.37, 6.95, 5.93, 5.09, 3.58, 4.53, 3.72, 5.59, 5.55, 4.98, 6.64, 3.65, 5.55, 5.91, 5.08],
    [6.26, 6.34, 6.01, 4.41, 6.55, 6.02, 5.42, 5.16, 6.45, 5.04, 6.53, 4.40, 4.48, 5.99, 5.29],
    [6.51, 6.24, 4.86, 5.61, 4.08, 4.30, 5.94, 5.51, 5.34, 5.36, 5.52, 5.79, 6.19, 6.68, 5.34],
    [5.85, 5.54, 4.65, 5.16, 4.83, 3.33, 3.15, 5.24, 3.91, 3.11, 4.90, 5.11, 5.66, 3.67, 5.30],
    [4.40, 4.72, 5.07, 5.44, 5.80, 4.56, 5.14, 4.69, 4.95, 4.75, 5.50, 6.20, 4.33, 5.38, 4.58],
    [5.67, 5.28, 5.54, 4.80, 6.09, 5.22, 5.35, 6.46, 5.90, 5.77, 6.87, 5.69, 5.63, 5.08, 6.70],
    [4.27, 4.32, 4.85, 3.92, 3.92, 5.44, 3.41, 5.22, 3.96, 3.80, 6.13, 3.66, 4.71, 6.00, 6.05],
]


Chirps_Rwanda = [3.25, 5.0, 4.94, 3.62, 6.21, 3.89, 4.49, 5.06, 5.72, 4.43, 4.0, 3.79, 3.06, 5.24, 3.51, 3.58, 4.96, 4.35, 5.6, 5.65, 4.36, 4.96, 4.94, 4.26]

Burundi = [
    [4.04, 4.51, 4.50, 4.61, 3.79, 4.23, 5.33, 5.31, 5.06, 3.94, 3.87, 5.35, 3.74, 5.27, 4.49],
    [4.70, 5.14, 6.11, 5.16, 4.66, 4.92, 6.77, 5.46, 6.14, 6.14, 4.72, 6.17, 6.19, 6.63, 5.31],
    [6.38, 3.72, 5.52, 4.89, 4.62, 4.80, 3.73, 3.75, 3.66, 4.22, 7.18, 4.19, 5.59, 4.85, 3.01],
    [4.65, 2.74, 4.48, 3.77, 5.25, 3.99, 3.89, 4.76, 3.03, 3.61, 4.25, 2.76, 2.39, 3.84, 4.35],
    [5.65, 4.57, 4.10, 5.96, 5.26, 3.73, 5.50, 5.12, 4.23, 4.23, 4.59, 5.17, 4.92, 3.74, 7.16],
    [5.86, 4.52, 5.69, 4.71, 4.31, 3.96, 4.00, 4.90, 2.65, 5.65, 4.79, 4.39, 5.87, 4.51, 3.79],
    [3.41, 4.82, 5.18, 5.35, 5.15, 4.63, 4.58, 5.24, 4.80, 4.42, 4.75, 4.57, 4.92, 4.67, 5.02],
    [3.11, 4.74, 4.48, 4.99, 5.37, 4.87, 5.18, 5.99, 5.37, 4.06, 3.14, 4.20, 4.78, 4.61, 4.71],
    [3.60, 5.27, 4.94, 3.38, 4.42, 4.39, 5.81, 3.49, 5.03, 5.98, 5.65, 5.99, 4.60, 4.11, 4.57],
    [4.79, 4.27, 6.79, 5.10, 3.47, 4.58, 4.67, 5.05, 5.65, 4.52, 5.90, 6.47, 5.49, 5.43, 3.10],
    [5.89, 3.31, 3.96, 5.98, 4.62, 5.14, 4.24, 5.82, 3.24, 4.39, 4.00, 5.14, 6.35, 3.93, 5.73],
    [4.50, 5.50, 5.19, 3.98, 5.10, 5.28, 5.52, 5.08, 5.42, 4.36, 5.22, 3.51, 5.73, 5.02, 6.38],
    [4.23, 4.95, 3.69, 5.06, 4.09, 5.09, 2.46, 6.20, 4.70, 3.09, 4.14, 4.22, 3.79, 4.51, 4.74],
    [3.90, 4.16, 6.04, 5.40, 6.44, 6.62, 3.68, 5.89, 5.33, 5.76, 5.51, 5.25, 3.29, 5.80, 4.02],
    [4.30, 4.84, 5.48, 4.95, 5.90, 4.43, 6.24, 5.62, 4.13, 6.19, 6.63, 5.19, 5.12, 4.43, 5.71],
    [6.10, 5.07, 5.78, 5.29, 5.21, 4.33, 2.69, 4.71, 3.93, 5.23, 5.09, 4.95, 4.20, 3.74, 4.51],
    [5.11, 5.04, 5.52, 5.00, 5.18, 5.38, 4.97, 3.34, 5.60, 6.66, 5.08, 2.92, 3.80, 4.89, 4.43],
    [5.01, 6.90, 5.39, 4.71, 3.56, 4.04, 3.74, 4.66, 4.98, 4.84, 5.51, 3.32, 5.34, 5.29, 3.87],
    [6.33, 6.61, 6.35, 4.72, 5.93, 6.22, 5.88, 5.29, 6.70, 5.00, 5.76, 4.34, 4.74, 5.95, 5.25],
    [5.92, 7.13, 4.57, 5.06, 3.84, 4.00, 5.72, 5.13, 5.81, 5.73, 5.59, 6.43, 6.79, 6.97, 4.95],
    [5.44, 5.21, 5.01, 5.26, 4.36, 3.34, 2.74, 5.65, 3.63, 2.78, 5.01, 5.18, 5.47, 3.50, 4.74],
    [4.84, 4.45, 5.10, 5.19, 6.22, 4.66, 5.80, 5.24, 4.90, 4.49, 5.59, 6.90, 3.90, 5.56, 4.52],
    [5.47, 5.90, 5.98, 5.10, 5.63, 5.21, 5.74, 5.63, 5.71, 6.37, 7.17, 5.81, 5.96, 4.66, 6.49],
    [3.93, 3.43, 4.36, 3.58, 4.35, 5.55, 3.28, 4.86, 4.05, 3.34, 5.44, 3.69, 4.54, 5.34, 5.16],
]

Chirps_Burundi = [3.49, 5.43, 4.29, 4.15, 7.03, 3.18, 4.95, 6.25, 5.03, 4.64, 4.7, 4.67, 2.77, 5.58, 4.19, 3.84, 5.37, 4.26, 5.95, 5.38, 5.65, 5.16, 6.6, 4.15]



Tanzania = [
    [2.00, 1.53, 1.37, 2.49, 1.65, 1.81, 1.77, 2.76, 2.30, 1.55, 1.41, 2.62, 1.48, 1.93, 2.09],
    [2.17, 2.79, 2.87, 1.71, 2.24, 2.15, 2.52, 2.31, 3.35, 3.15, 1.67, 3.43, 2.31, 3.21, 2.48],
    [2.52, 1.81, 2.62, 2.29, 1.82, 2.74, 1.33, 1.88, 1.02, 2.08, 2.28, 1.57, 1.62, 1.62, 1.25],
    [2.24, 1.52, 1.34, 1.23, 1.80, 1.64, 1.04, 1.86, 0.85, 1.60, 1.17, 0.51, 1.36, 1.45, 1.29],
    [2.02, 1.77, 1.88, 2.92, 3.72, 1.67, 2.75, 2.14, 2.08, 2.68, 3.24, 2.52, 1.28, 1.30, 2.81],
    [1.93, 1.88, 1.44, 1.60, 1.31, 1.16, 0.72, 1.02, 1.09, 1.55, 1.97, 1.34, 1.55, 1.30, 1.36],
    [1.15, 2.10, 2.10, 2.23, 1.49, 2.61, 1.67, 2.52, 2.03, 1.59, 2.37, 1.55, 1.65, 1.40, 2.37],
    [1.53, 1.70, 2.21, 1.65, 2.43, 2.92, 1.17, 2.77, 1.98, 1.54, 1.73, 1.27, 1.48, 2.52, 1.87],
    [1.17, 2.04, 2.69, 1.30, 2.62, 1.66, 2.24, 1.88, 2.30, 2.42, 3.05, 3.10, 2.21, 1.85, 2.02],
    [2.19, 1.55, 2.37, 2.51, 2.20, 1.78, 1.59, 2.07, 2.14, 2.01, 3.19, 3.13, 2.88, 2.73, 1.63],
    [2.92, 1.72, 1.30, 2.44, 1.96, 3.04, 1.48, 2.50, 1.02, 1.29, 1.86, 2.04, 1.89, 1.61, 2.28],
    [2.40, 2.54, 1.76, 1.13, 3.06, 2.15, 1.94, 2.91, 2.70, 1.21, 2.79, 1.75, 1.70, 1.79, 2.33],
    [1.37, 1.56, 1.99, 1.52, 1.56, 1.39, 0.84, 2.27, 2.50, 1.36, 1.48, 1.06, 1.44, 1.45, 2.78],
    [1.23, 2.09, 2.65, 2.21, 3.30, 3.06, 2.01, 3.03, 1.76, 3.32, 2.52, 1.67, 0.96, 2.31, 1.58],
    [2.85, 1.36, 2.39, 1.87, 2.33, 1.17, 2.60, 2.39, 1.93, 2.40, 1.77, 2.35, 2.08, 2.71, 3.08],
    [2.40, 1.45, 2.49, 2.74, 1.52, 2.30, 1.04, 2.75, 1.92, 2.04, 1.62, 1.88, 1.83, 1.67, 1.73],
    [2.04, 1.66, 2.18, 1.98, 2.25, 2.31, 1.48, 1.31, 2.42, 2.38, 1.46, 1.11, 1.90, 1.74, 2.40],
    [1.74, 1.85, 1.84, 1.88, 1.43, 1.05, 1.50, 1.62, 1.16, 2.35, 0.79, 0.89, 1.31, 2.08, 0.97],
    [2.26, 1.89, 2.56, 1.57, 1.98, 2.73, 1.88, 1.83, 2.77, 1.62, 2.17, 1.71, 1.76, 2.71, 2.03],
    [2.24, 3.03, 2.37, 1.80, 1.31, 1.25, 2.73, 2.11, 3.18, 2.91, 1.44, 2.31, 3.30, 2.00, 1.54],
    [1.92, 1.36, 1.78, 2.01, 1.72, 1.10, 1.20, 2.29, 1.95, 1.12, 2.08, 2.39, 1.76, 1.31, 1.47],
    [2.86, 2.09, 2.23, 1.19, 3.29, 1.63, 3.34, 3.08, 1.67, 1.93, 1.97, 3.35, 1.66, 2.80, 2.05],
    [2.68, 2.87, 2.66, 2.98, 2.99, 2.21, 2.70, 2.34, 2.58, 3.26, 3.81, 3.14, 1.29, 1.92, 1.41],
    [1.25, 1.10, 2.47, 2.21, 2.21, 2.84, 1.69, 2.17, 1.89, 1.20, 1.29, 1.49, 1.28, 1.79, 2.20],
]

Chirps_Tanzania = [1.48, 3.41, 2.07, 1.94, 6.11, 1.56, 2.53, 4.97, 2.85, 3.61, 2.3, 5.0, 1.61, 5.52, 3.22, 3.21, 3.95, 2.53, 4.05, 3.36, 3.01, 3.31, 4.1, 2.37]


Uganda = [
    [3.73, 4.46, 4.45, 4.98, 4.15, 4.13, 5.24, 5.13, 4.77, 4.37, 3.44, 4.67, 4.78, 3.75, 3.67],
    [6.10, 5.24, 7.06, 5.14, 5.35, 4.92, 5.63, 5.88, 6.62, 7.63, 6.42, 6.12, 5.68, 5.49, 5.04],
    [4.66, 3.35, 4.64, 4.85, 4.88, 4.88, 3.63, 4.57, 4.54, 4.59, 5.47, 4.08, 4.95, 4.79, 3.58],
    [2.76, 3.00, 4.01, 3.18, 4.90, 3.78, 3.22, 4.07, 3.44, 3.87, 3.97, 1.81, 3.45, 4.53, 3.90],
    [5.61, 3.75, 4.78, 7.12, 6.38, 5.42, 6.07, 6.11, 7.05, 6.18, 5.94, 6.75, 5.83, 5.71, 6.21],
    [4.49, 3.84, 5.16, 5.83, 5.04, 4.07, 5.06, 4.50, 3.60, 4.55, 5.01, 4.71, 5.45, 4.24, 4.06],
    [3.07, 3.87, 4.08, 4.59, 4.25, 5.48, 4.88, 5.35, 4.40, 4.37, 5.40, 4.14, 3.62, 4.83, 5.24],
    [4.05, 3.40, 3.10, 4.72, 4.45, 4.54, 5.31, 5.33, 4.49, 3.99, 3.66, 3.95, 4.06, 4.30, 5.01],
    [3.65, 3.77, 5.22, 4.87, 3.46, 4.36, 5.23, 3.48, 4.89, 4.43, 5.29, 5.60, 3.38, 4.64, 4.80],
    [4.65, 4.93, 4.77, 5.11, 2.38, 5.22, 5.10, 4.44, 4.91, 4.39, 4.49, 6.76, 4.93, 4.18, 2.94],
    [5.62, 3.96, 5.17, 4.55, 4.51, 3.99, 4.85, 4.95, 3.71, 3.95, 4.83, 5.25, 6.42, 4.26, 4.61],
    [4.47, 5.90, 5.08, 4.23, 4.17, 5.03, 4.81, 4.39, 5.69, 4.01, 4.97, 4.20, 4.50, 2.76, 5.26],
    [4.55, 3.97, 4.11, 3.75, 4.17, 4.67, 2.99, 4.48, 3.76, 3.91, 5.04, 3.86, 4.81, 4.49, 4.78],
    [6.18, 4.32, 4.75, 4.86, 6.44, 5.44, 4.66, 6.46, 5.69, 6.16, 5.98, 6.08, 4.51, 5.72, 5.73],
    [3.55, 4.65, 4.72, 4.84, 5.49, 4.39, 4.92, 5.52, 3.30, 4.52, 5.82, 4.90, 4.46, 5.10, 3.90],
    [4.84, 3.93, 5.04, 4.59, 4.70, 3.50, 3.11, 4.40, 3.62, 5.66, 4.75, 3.92, 5.24, 4.26, 4.65],
    [4.69, 4.07, 3.91, 4.17, 4.63, 4.55, 4.13, 3.91, 4.78, 5.45, 5.79, 3.19, 3.50, 4.15, 4.13],
    [5.01, 5.42, 4.88, 4.43, 4.18, 5.61, 3.72, 4.80, 4.86, 5.10, 6.67, 4.58, 5.44, 4.63, 4.86],
    [5.34, 6.07, 4.66, 4.63, 6.11, 5.30, 4.35, 5.55, 7.28, 6.10, 5.47, 5.69, 4.51, 5.97, 6.42],
    [4.30, 6.12, 5.00, 3.98, 4.23, 4.46, 5.38, 5.09, 5.57, 4.44, 5.86, 5.23, 5.68, 5.57, 3.68],
    [4.29, 4.56, 4.32, 3.85, 4.06, 3.35, 4.05, 4.46, 4.05, 2.59, 4.30, 4.96, 4.07, 3.62, 5.27],
    [4.41, 4.76, 4.12, 5.55, 4.67, 4.14, 4.74, 4.64, 4.43, 3.93, 5.12, 5.80, 3.94, 4.36, 4.06],
    [5.38, 6.03, 5.44, 5.88, 5.17, 5.42, 5.40, 6.11, 5.90, 7.47, 6.37, 5.36, 7.60, 5.34, 6.42],
    [3.81, 4.34, 3.37, 4.04, 3.48, 4.89, 3.32, 4.71, 4.66, 4.59, 5.28, 4.09, 4.87, 5.25, 4.49],
]


Chirps_Uganda = [3.0, 4.09, 3.84, 3.62, 5.73, 3.04, 3.93, 3.85, 4.05, 4.2, 3.32, 3.53, 2.44, 4.6, 3.07, 2.88, 3.79, 3.59, 4.46, 4.74, 3.55, 3.83, 4.71, 2.72]

Eritrea = [
    [0.25, 0.14, 0.28, 0.66, 0.53, 0.42, 0.63, 0.35, 0.26, 0.50, 0.50, 0.29, 0.61, 0.33, 0.21],
    [0.53, 0.33, 0.76, 0.37, 0.56, 0.28, 0.42, 0.33, 0.47, 0.71, 0.60, 0.66, 1.15, 0.28, 0.33],
    [0.39, 0.16, 0.23, 0.37, 0.39, 0.25, 0.43, 0.34, 0.36, 0.16, 0.22, 0.33, 0.23, 0.41, 0.13],
    [0.14, 0.29, 0.42, 0.18, 0.23, 0.20, 0.26, 0.20, 0.71, 0.32, 0.14, 0.04, 0.43, 0.69, 0.30],
    [0.78, 0.55, 0.28, 1.20, 0.25, 0.81, 0.57, 0.75, 0.75, 1.99, 0.43, 0.67, 0.58, 0.46, 1.20],
    [0.33, 0.20, 0.20, 0.22, 0.32, 0.55, 0.49, 0.33, 0.27, 0.30, 0.26, 0.28, 0.17, 0.23, 0.17],
    [0.22, 0.29, 0.41, 0.31, 0.15, 0.39, 0.21, 0.34, 0.28, 0.33, 0.26, 0.18, 0.09, 0.29, 0.38],
    [0.33, 0.17, 0.25, 0.38, 0.36, 0.40, 0.31, 0.36, 0.26, 0.29, 0.25, 0.34, 0.19, 0.13, 0.33],
    [0.19, 0.31, 0.33, 0.38, 0.19, 0.33, 0.19, 0.34, 0.97, 0.53, 0.34, 0.36, 0.17, 0.27, 0.35],
    [0.14, 0.76, 0.26, 0.70, 0.13, 0.37, 0.72, 0.73, 0.39, 0.49, 0.53, 0.63, 0.20, 0.13, 0.31],
    [0.43, 0.33, 0.39, 0.38, 0.25, 0.23, 0.28, 0.30, 0.43, 0.14, 0.31, 0.36, 0.47, 0.25, 0.28],
    [0.23, 0.79, 0.78, 0.29, 0.28, 0.18, 0.09, 0.26, 0.59, 0.30, 0.25, 0.42, 0.40, 0.45, 0.46],
    [0.28, 0.41, 0.69, 0.20, 0.36, 0.44, 0.48, 0.32, 0.42, 0.43, 0.59, 0.12, 0.25, 0.31, 0.11],
    [1.06, 0.48, 0.19, 0.68, 0.19, 0.56, 0.22, 0.45, 0.56, 0.35, 0.25, 0.35, 0.48, 1.24, 0.83],
    [0.26, 0.28, 0.12, 0.26, 0.30, 0.41, 0.60, 0.40, 0.33, 0.08, 0.64, 0.20, 0.24, 0.42, 0.23],
    [0.16, 0.26, 0.48, 0.21, 0.22, 0.11, 0.39, 0.36, 0.19, 0.54, 0.24, 0.32, 0.45, 0.29, 0.35],
    [0.38, 0.30, 0.16, 0.33, 0.33, 0.25, 0.35, 0.48, 0.35, 0.17, 0.37, 0.30, 0.22, 0.28, 0.29],
    [0.57, 0.45, 0.85, 0.41, 0.42, 0.57, 0.42, 0.52, 0.42, 0.28, 0.50, 0.14, 1.45, 0.51, 0.26],
    [0.91, 0.54, 0.39, 0.34, 0.20, 0.29, 0.47, 0.43, 0.84, 0.28, 0.54, 0.34, 0.16, 0.22, 0.64],
    [0.24, 0.48, 0.79, 0.54, 0.31, 0.39, 0.27, 0.13, 0.66, 0.39, 0.27, 0.22, 0.44, 0.49, 0.43],
    [0.49, 0.32, 0.11, 0.32, 0.30, 0.37, 0.46, 0.31, 0.61, 0.14, 0.34, 0.47, 0.57, 0.24, 0.65],
    [0.41, 0.67, 0.37, 0.60, 0.44, 0.44, 0.59, 0.77, 0.36, 0.17, 0.20, 0.55, 0.28, 0.13, 0.29],
    [0.39, 0.45, 0.62, 0.62, 0.50, 0.83, 0.65, 0.31, 0.36, 0.64, 0.44, 0.53, 0.76, 0.43, 0.54],
    [0.42, 0.27, 0.18, 0.18, 0.20, 0.18, 0.43, 0.39, 0.31, 0.51, 0.59, 0.39, 0.51, 0.54, 0.34],
]

Chirps_Eritrea = [0.51, 0.37, 0.33, 0.35, 1.41, 0.37, 0.6, 0.71, 0.34, 0.35, 0.31, 0.41, 0.24, 0.5, 0.28, 0.44, 0.34, 0.24, 0.27, 0.39, 0.43, 0.65, 0.71, 0.37]

Somalia = [
    [0.84, 1.73, 1.38, 2.07, 1.68, 1.38, 2.35, 2.06, 2.22, 1.71, 1.03, 1.27, 0.99, 1.10, 0.89],
    [3.59, 2.10, 4.05, 2.05, 2.03, 1.87, 1.54, 2.89, 2.68, 4.81, 4.93, 1.75, 4.11, 2.23, 2.61],
    [1.67, 0.82, 0.98, 1.78, 1.40, 1.47, 1.12, 1.26, 1.42, 1.12, 1.69, 1.35, 1.52, 1.23, 1.69],
    [1.01, 1.19, 0.92, 0.78, 1.24, 1.09, 1.09, 0.77, 0.66, 1.09, 1.22, 0.54, 1.29, 2.12, 1.16],
    [2.86, 2.53, 2.74, 4.64, 4.97, 4.18, 4.64, 3.80, 5.13, 6.60, 4.18, 3.40, 3.44, 3.62, 3.58],
    [0.84, 1.18, 0.81, 1.51, 1.34, 1.15, 1.44, 1.15, 1.23, 0.86, 1.32, 0.70, 1.40, 1.45, 1.02],
    [0.82, 0.87, 1.16, 1.31, 0.75, 1.68, 1.30, 1.22, 1.38, 1.19, 1.51, 1.33, 0.60, 1.09, 1.48],
    [0.91, 0.82, 1.01, 1.81, 1.20, 1.32, 1.19, 1.55, 1.20, 1.08, 0.85, 0.91, 0.97, 0.99, 1.86],
    [1.43, 1.28, 1.09, 1.13, 0.42, 2.05, 1.00, 0.95, 1.87, 0.93, 1.01, 1.87, 0.77, 1.16, 1.47],
    [1.24, 2.44, 2.00, 1.85, 1.61, 2.19, 2.21, 1.92, 2.25, 1.90, 2.34, 2.43, 1.72, 1.55, 1.38],
    [1.30, 1.87, 2.00, 1.43, 1.76, 0.71, 1.51, 1.43, 1.12, 0.72, 1.63, 1.35, 1.99, 1.42, 0.95],
    [1.08, 2.40, 1.79, 1.64, 1.55, 1.95, 1.33, 2.13, 1.81, 1.57, 1.44, 1.75, 0.93, 1.36, 2.58],
    [1.84, 0.59, 1.82, 1.15, 1.36, 1.71, 1.78, 0.77, 0.92, 0.90, 0.96, 1.12, 1.40, 1.38, 1.05],
    [3.40, 1.46, 2.40, 2.37, 2.59, 2.80, 0.96, 2.10, 2.08, 2.30, 1.47, 2.97, 1.66, 2.86, 3.70],
    [0.98, 1.18, 1.07, 1.46, 1.90, 0.92, 2.00, 2.00, 1.95, 0.82, 1.76, 1.48, 0.97, 1.21, 1.07],
    [0.63, 0.82, 1.41, 0.89, 0.68, 0.54, 0.95, 1.29, 1.00, 1.73, 0.78, 0.74, 1.01, 0.69, 0.97],
    [1.65, 1.56, 1.24, 1.39, 3.43, 1.77, 1.77, 1.20, 1.69, 1.78, 2.50, 2.08, 1.19, 2.04, 2.19],
    [1.38, 0.79, 0.74, 1.12, 1.04, 0.84, 1.18, 1.33, 1.74, 0.50, 1.65, 1.41, 1.80, 1.56, 1.43],
    [1.05, 1.36, 0.86, 2.03, 1.72, 1.85, 1.82, 1.78, 3.17, 1.31, 1.27, 1.96, 1.85, 3.16, 2.80],
    [1.28, 2.28, 1.86, 1.49, 1.03, 1.85, 1.68, 0.88, 1.56, 2.01, 1.48, 1.83, 2.69, 1.72, 1.17],
    [1.47, 1.23, 1.27, 0.76, 1.58, 1.00, 1.00, 1.22, 1.14, 1.04, 0.77, 1.03, 1.12, 0.90, 1.11],
    [1.79, 1.70, 1.95, 0.96, 1.48, 2.31, 1.35, 2.55, 1.22, 1.24, 1.94, 2.44, 2.03, 1.45, 1.54],
    [3.53, 2.20, 1.71, 2.96, 1.99, 2.54, 3.36, 2.57, 2.86, 2.98, 2.90, 1.90, 3.22, 2.51, 1.81],
    [1.52, 1.03, 0.94, 1.06, 1.38, 0.85, 1.39, 1.38, 1.65, 1.13, 1.12, 1.24, 1.75, 1.24, 1.51],
]

Chirps_Somalia = [0.92, 2.41, 1.14, 0.47, 6.4, 0.52, 1.31, 1.44, 1.03, 1.88, 1.24, 2.29, 0.67, 2.9, 1.15, 1.16, 1.48, 0.29, 2.21, 2.21, 1.74, 1.32, 2.13, 0.63]

Ethiopia = [
    [1.02, 0.94, 1.24, 1.65, 1.51, 1.17, 1.82, 1.45, 1.54, 1.62, 1.04, 1.10, 1.40, 0.97, 0.69],
    [2.17, 2.03, 2.83, 1.30, 2.04, 1.06, 1.40, 1.70, 1.76, 2.99, 3.25, 1.63, 2.99, 1.17, 1.09],
    [1.43, 0.59, 1.06, 1.27, 1.69, 1.05, 1.61, 1.22, 1.40, 0.92, 1.52, 1.19, 1.66, 1.29, 1.13],
    [0.95, 1.40, 1.21, 0.48, 1.23, 1.08, 0.69, 0.71, 1.56, 1.03, 0.92, 0.50, 1.67, 2.08, 0.71],
    [2.09, 1.62, 1.41, 4.02, 1.97, 2.69, 2.23, 2.45, 2.91, 4.58, 2.84, 2.28, 2.74, 2.11, 2.70],
    [1.08, 1.12, 1.28, 1.31, 1.60, 1.44, 1.54, 1.46, 1.34, 1.50, 1.49, 1.54, 1.72, 1.38, 0.82],
    [1.24, 1.13, 1.89, 1.42, 1.17, 1.69, 1.11, 1.73, 1.51, 0.97, 1.51, 1.06, 0.54, 1.32, 1.77],
    [1.26, 0.82, 0.89, 1.38, 1.50, 1.35, 1.60, 1.13, 1.69, 0.97, 1.32, 0.91, 1.12, 0.76, 1.93],
    [1.06, 1.09, 1.44, 1.61, 0.60, 2.08, 1.27, 0.83, 2.21, 1.21, 1.73, 1.46, 0.97, 1.23, 1.43],
    [1.13, 1.71, 1.33, 1.56, 0.84, 1.35, 1.77, 1.91, 0.96, 1.53, 1.62, 1.92, 0.91, 1.13, 1.01],
    [1.93, 1.51, 2.03, 1.34, 1.49, 0.90, 1.36, 1.15, 1.60, 0.79, 1.41, 1.62, 2.27, 1.31, 1.12],
    [0.97, 2.38, 1.78, 1.31, 1.21, 1.09, 1.02, 1.00, 1.65, 1.49, 1.23, 1.62, 1.05, 1.26, 2.23],
    [1.61, 1.35, 1.73, 1.09, 1.33, 1.45, 1.87, 1.28, 1.03, 1.70, 1.38, 0.88, 1.27, 1.61, 0.76],
    [3.18, 1.66, 1.09, 1.80, 1.67, 1.61, 1.24, 2.19, 1.31, 1.31, 1.28, 1.60, 1.44, 2.43, 2.70],
    [1.08, 1.15, 1.26, 1.56, 1.55, 1.55, 1.67, 1.56, 1.24, 0.89, 1.67, 1.36, 1.13, 1.62, 1.26],
    [1.14, 0.78, 1.36, 0.94, 0.90, 0.41, 0.85, 1.36, 1.16, 2.37, 1.29, 1.47, 1.37, 0.81, 1.45],
    [1.35, 1.48, 0.88, 1.19, 1.80, 1.23, 1.16, 1.31, 1.40, 1.04, 1.50, 1.06, 0.70, 1.65, 1.50],
    [1.59, 1.46, 2.02, 1.22, 1.56, 1.56, 1.05, 1.63, 2.08, 1.41, 2.13, 1.73, 3.14, 1.85, 1.45],
    [1.83, 1.86, 1.32, 1.55, 1.56, 1.15, 1.81, 2.11, 2.55, 1.43, 1.38, 1.48, 1.29, 1.64, 2.11],
    [0.91, 1.90, 2.09, 1.51, 1.21, 1.32, 1.74, 0.82, 1.84, 1.57, 1.32, 1.28, 1.65, 2.07, 1.19],
    [1.37, 1.45, 0.96, 1.12, 1.19, 1.19, 1.10, 1.34, 1.88, 1.17, 1.09, 1.54, 1.31, 0.81, 2.45],
    [1.35, 1.82, 1.34, 1.65, 1.62, 1.82, 1.44, 1.63, 1.32, 0.95, 1.73, 2.22, 1.24, 1.10, 1.44],
    [1.77, 1.79, 1.42, 2.17, 1.93, 2.69, 2.29, 1.19, 1.64, 2.32, 1.66, 1.87, 2.85, 1.68, 1.80],
    [1.24, 1.03, 0.56, 1.26, 0.99, 0.67, 1.50, 0.95, 1.48, 1.39, 1.62, 1.51, 1.60, 1.50, 0.91],
]

Chirps_Ethiopia = [1.22, 1.54, 1.12, 0.87, 4.2, 1.31, 1.52, 1.98, 1.28, 1.45, 1.16, 1.52, 0.91, 2.38, 1.05, 1.81, 1.49, 0.77, 1.74, 1.43, 1.98, 1.87, 1.95, 1.03]

Ethiopia_JJAS = [
    [3.43, 4.48, 3.86, 3.45, 3.32, 3.33, 3.98, 3.55, 3.56, 3.62, 3.95, 3.52, 3.57, 4.00, 3.56],
    [3.92, 3.44, 3.65, 3.64, 4.27, 4.15, 3.75, 4.30, 4.10, 4.33, 3.31, 4.33, 3.72, 3.86, 4.20],
    [4.28, 3.54, 3.71, 4.19, 4.30, 3.58, 4.51, 3.73, 3.81, 3.75, 4.14, 4.02, 4.12, 3.51, 3.70],
    [3.96, 4.12, 3.74, 4.13, 3.80, 3.61, 3.90, 3.90, 3.56, 3.83, 4.13, 4.31, 3.67, 3.99, 3.08],
    [4.28, 3.56, 3.12, 3.30, 3.47, 3.86, 3.56, 3.56, 3.91, 3.02, 3.46, 3.53, 3.23, 3.49, 3.16],
    [4.34, 3.67, 3.62, 4.05, 4.40, 4.60, 3.83, 3.75, 4.38, 3.73, 4.03, 3.96, 4.27, 3.71, 3.77],
    [4.25, 4.42, 5.13, 3.65, 4.25, 4.22, 3.83, 4.59, 4.29, 4.43, 3.84, 4.48, 3.63, 4.53, 4.04],
    [3.86, 4.50, 3.79, 4.28, 4.14, 3.97, 3.81, 3.63, 3.83, 3.70, 4.13, 3.75, 3.78, 3.78, 3.78],
    [3.20, 3.79, 3.85, 4.11, 4.38, 3.86, 3.27, 3.85, 4.00, 4.13, 4.32, 4.16, 3.84, 3.71, 4.06],
    [3.71, 3.91, 4.08, 4.04, 3.60, 3.66, 3.72, 3.47, 3.64, 4.15, 3.87, 3.39, 4.03, 3.79, 3.94],
    [3.90, 4.36, 4.31, 3.59, 4.34, 4.46, 3.99, 3.84, 3.78, 3.72, 3.55, 4.47, 4.21, 4.08, 4.18],
    [3.89, 4.46, 4.41, 3.98, 4.02, 4.54, 4.25, 3.73, 3.98, 4.36, 4.02, 4.13, 3.52, 4.62, 4.30],
    [4.33, 3.90, 4.04, 4.06, 4.01, 3.67, 3.81, 3.35, 4.70, 3.65, 3.66, 4.07, 4.35, 3.49, 4.03],
    [3.94, 3.67, 3.99, 3.92, 4.68, 3.76, 3.84, 4.07, 3.64, 3.77, 4.00, 3.97, 3.80, 3.77, 3.59],
    [3.94, 4.59, 3.81, 3.86, 3.91, 4.05, 4.45, 4.06, 3.96, 4.57, 4.54, 4.56, 3.79, 3.76, 4.76],
    [4.31, 4.29, 4.57, 4.25, 4.46, 3.94, 4.19, 3.96, 3.78, 3.81, 3.73, 3.89, 4.24, 4.34, 4.04],
    [3.45, 3.85, 3.94, 3.67, 4.12, 4.18, 3.62, 3.58, 3.28, 3.56, 3.75, 4.41, 3.38, 3.65, 3.80],
    [4.25, 3.66, 3.64, 3.17, 3.55, 4.08, 4.19, 3.57, 4.46, 4.15, 4.13, 3.69, 4.10, 4.26, 3.81],
    [4.08, 4.69, 4.21, 4.00, 4.30, 3.89, 4.54, 4.27, 4.15, 3.80, 4.37, 4.52, 3.81, 3.28, 3.91],
    [3.77, 4.13, 3.72, 4.33, 4.21, 4.55, 4.00, 3.46, 3.96, 4.29, 3.99, 3.96, 3.80, 4.36, 4.16],
    [3.73, 4.04, 3.46, 3.75, 4.01, 4.14, 4.18, 3.63, 3.61, 3.77, 3.67, 4.24, 3.90, 4.02, 4.23],
    [3.93, 4.71, 4.07, 4.17, 4.40, 3.68, 3.42, 4.15, 4.08, 3.94, 4.26, 4.21, 4.08, 3.83, 3.27],
    [3.64, 3.75, 3.54, 3.47, 3.91, 2.93, 3.79, 2.73, 3.96, 4.09, 3.40, 4.43, 3.31, 3.80, 3.27],
    [4.59, 4.43, 3.71, 3.90, 3.79, 4.16, 4.25, 4.39, 3.88, 3.86, 4.16, 4.27, 4.71, 4.64, 3.92],
]

Chirps_Ethiopia_JJAS = [4.96, 5.78, 5.28, 6.13, 5.19, 6.26, 5.55, 5.44, 5.67, 4.83, 5.83, 5.09, 5.34, 5.84, 6.47, 5.67, 4.76, 5.89, 5.82, 6.27, 5.74, 5.16, 4.82, 5.2]

Djibouti = [
    [0.43, 0.31, 0.41, 0.84, 0.91, 0.39, 1.10, 0.61, 0.45, 0.72, 0.24, 0.46, 0.53, 0.35, 0.17],
    [0.78, 0.80, 1.52, 0.50, 0.57, 0.45, 0.86, 0.57, 0.58, 2.06, 1.01, 0.87, 1.18, 0.60, 0.41],
    [0.40, 0.25, 0.15, 0.50, 0.92, 0.32, 0.39, 0.80, 0.53, 0.25, 0.50, 0.33, 0.47, 0.59, 0.37],
    [0.21, 0.48, 0.46, 0.24, 0.38, 0.29, 0.35, 0.23, 1.04, 0.56, 0.25, 0.23, 0.32, 1.03, 0.64],
    [0.92, 1.35, 0.44, 2.67, 0.63, 2.19, 1.16, 1.18, 2.13, 4.25, 1.35, 1.20, 1.80, 0.81, 1.25],
    [0.39, 0.28, 0.17, 0.34, 0.38, 0.48, 0.43, 0.67, 0.19, 0.24, 0.17, 0.41, 0.19, 0.33, 0.18],
    [0.38, 0.45, 0.63, 0.59, 0.18, 0.52, 0.40, 0.70, 0.80, 0.34, 0.29, 0.16, 0.24, 0.34, 0.47],
    [0.71, 0.12, 0.29, 0.54, 0.24, 0.34, 0.31, 0.28, 0.65, 0.17, 0.55, 0.23, 0.28, 0.33, 0.62],
    [0.45, 0.52, 0.41, 1.06, 0.16, 0.99, 0.39, 0.24, 1.28, 0.38, 0.55, 0.46, 0.49, 0.51, 0.41],
    [0.36, 0.98, 0.53, 0.81, 0.26, 0.43, 0.88, 0.67, 0.38, 0.42, 0.89, 0.79, 0.45, 0.29, 0.29],
    [0.55, 0.54, 0.76, 0.82, 0.54, 0.33, 0.49, 0.47, 0.49, 0.12, 0.48, 0.26, 0.51, 0.36, 0.28],
    [0.29, 0.95, 1.08, 0.89, 0.58, 0.40, 0.15, 0.45, 0.56, 0.60, 0.46, 0.65, 0.37, 0.38, 0.75],
    [0.60, 0.73, 0.61, 0.10, 0.39, 0.61, 0.84, 0.60, 0.37, 0.80, 0.37, 0.20, 0.21, 0.83, 0.24],
    [1.46, 0.86, 0.33, 0.66, 0.29, 0.66, 0.34, 0.99, 0.58, 0.39, 0.40, 0.49, 0.51, 1.11, 1.44],
    [0.71, 0.32, 0.11, 0.62, 0.69, 0.56, 0.81, 0.88, 0.53, 0.10, 0.74, 0.25, 0.25, 0.44, 0.22],
    [0.10, 0.20, 0.58, 0.26, 0.25, 0.10, 0.29, 0.20, 0.53, 1.05, 0.59, 0.43, 0.44, 0.25, 0.47],
    [0.61, 0.67, 0.34, 0.56, 0.85, 0.35, 0.35, 0.53, 0.51, 0.24, 0.43, 0.49, 0.22, 1.14, 0.59],
    [0.70, 0.52, 0.93, 0.33, 0.45, 0.38, 0.38, 0.37, 0.46, 0.31, 0.46, 0.22, 1.27, 0.23, 0.53],
    [0.94, 0.41, 0.56, 0.53, 0.18, 0.35, 0.23, 0.91, 1.50, 0.29, 0.33, 0.30, 0.36, 0.89, 0.73],
    [0.18, 0.60, 0.42, 0.40, 0.29, 0.94, 0.27, 0.20, 0.95, 1.07, 0.24, 0.29, 0.60, 0.42, 0.28],
    [0.46, 0.85, 0.23, 0.25, 0.53, 0.39, 0.47, 0.17, 0.65, 0.44, 0.32, 0.57, 0.69, 0.29, 0.72],
    [0.54, 0.74, 0.69, 0.81, 0.33, 0.53, 0.35, 0.71, 0.42, 0.35, 0.52, 0.90, 0.63, 0.29, 0.51],
    [0.88, 0.61, 0.93, 1.06, 1.11, 1.12, 1.02, 0.31, 0.27, 1.38, 0.65, 1.02, 1.36, 0.51, 0.76],
    [0.78, 0.41, 0.25, 0.34, 0.45, 0.26, 0.47, 0.44, 1.03, 0.64, 1.01, 0.48, 0.52, 0.40, 0.26],
]

Chirps_Djibouti = [0.43, 0.93, 0.26, 0.27, 1.56, 0.44, 0.8, 0.83, 0.2, 0.32, 0.31, 0.47, 0.18, 0.73, 0.19, 0.37, 0.34, 0.2, 0.35, 0.31, 0.63, 0.6, 0.25, 0.37]










# Create the xarray DataArray
da = xr.DataArray(data_kenya, coords={"year": years, "member": members}, dims=["year", "member"])
da_Kenya = xr.DataArray(data_kenya_new, coords={"year": years, "member": members}, dims=["year", "member"])
da_Sudan = xr.DataArray(Sudan, coords={"year": years, "member": members}, dims=["year", "member"])
da_South_Sudan = xr.DataArray(South_Sudan, coords={"year": years, "member": members}, dims=["year", "member"])
da_Uganda = xr.DataArray(Uganda, coords={"year": years, "member": members}, dims=["year", "member"])
da_Ethiopia = xr.DataArray(Ethiopia, coords={"year": years, "member": members}, dims=["year", "member"])
da_Somalia = xr.DataArray(Somalia, coords={"year": years, "member": members}, dims=["year", "member"])
da_Djibouti = xr.DataArray(Djibouti, coords={"year": years, "member": members}, dims=["year", "member"])
da_Eritrea = xr.DataArray(Eritrea, coords={"year": years, "member": members}, dims=["year", "member"])
da_Tanzania = xr.DataArray(Tanzania, coords={"year": years, "member": members}, dims=["year", "member"])
da_Rwanda = xr.DataArray(Rwanda, coords={"year": years, "member": members}, dims=["year", "member"])
da_Burundi = xr.DataArray(Burundi, coords={"year": years, "member": members}, dims=["year", "member"])


# Example: access rainfall for year=1994, member='Member 2'
#print("Rainfall for 1994, Member 2:", da.sel(year=1994, member="Member 2").item())


BORDER_OPT = {
    "Kenya_Hindcast": da_Kenya,
    "Kenya_Obs_Chirps": Chirps_Kenya,
    "Sudan_Hindcast": da_Sudan,
    "Sudan_Obs_Chirps": Chirps_Sudan,
    "South_Sudan_Hindcast": da_South_Sudan,
    "South_Sudan_Obs_Chirps": Chirps_South_Sudan,
    "Uganda_Hindcast": da_Uganda,
    "Uganda_Obs_Chirps": Chirps_Uganda,
    "Ethiopia_Hindcast": da_Ethiopia,
    "Ethiopia_Obs_Chirps": Chirps_Ethiopia,
    "Somalia_Hindcast": da_Somalia,
    "Somalia_Obs_Chirps": Chirps_Somalia,
    "Djibouti_Hindcast": da_Djibouti,
    "Djibouti_Obs_Chirps": Chirps_Djibouti,
    "Eritrea_Hindcast": da_Eritrea,
    "Eritrea_Obs_Chirps": Chirps_Eritrea,
    "Tanzania_Hindcast": da_Tanzania,
    "Tanzania_Obs_Chirps": Chirps_Tanzania,
    "Rwanda_Hindcast": da_Rwanda,
    "Rwanda_Obs_Chirps": Chirps_Rwanda,
    "Burundi_Hindcast": da_Burundi,
    "Burundi_Obs_Chirps": Chirps_Burundi,
    "Kenya_old": da,
    "Kenya_chirps_old": Chirps,
}

# Define the location function
def location(local):
    if local in BORDER_OPT:
        return BORDER_OPT[local]
    else:
        raise ValueError(f"Location '{local}' not found.")

    
def terciles(da,obs,state): 
    RFA_upper = np.percentile(da, 66.66666)
    RFA_lower = np.percentile(da, 33.33333)
    
    Yearly_Forecast_member_below = []
    Yearly_Forecast_member_above= []
    Yearly_Forecast_member_between = []
    
    for i in range(da.sizes['year']):
             data = da.isel(year=i)
             cat_0_mask = data < RFA_lower
             Yearly_Forecast_member_below.append(cat_0_mask)
             cat_1_mask = data > RFA_upper
             Yearly_Forecast_member_above.append(cat_1_mask)
             cat_2_mask = (data >= RFA_lower) & (data <= RFA_upper)
             Yearly_Forecast_member_between.append(cat_2_mask)
      
    Yearly_Forecast_below= xr.concat(Yearly_Forecast_member_below, dim='year')
    Yearly_Forecast_above= xr.concat(Yearly_Forecast_member_above, dim='year')
    Yearly_Forecast_between= xr.concat(Yearly_Forecast_member_between, dim='year')
    
    Yearly_Counts_Below = Yearly_Forecast_below.sum(dim="member")
    Yearly_Counts_Above = Yearly_Forecast_above.sum(dim="member")
    Yearly_Counts_Between = Yearly_Forecast_between.sum(dim="member")
    
     
    Yearly_percentage_Below = []
    
    
    for i in range(Yearly_Counts_Below.sizes['year']):
        percentage = (Yearly_Counts_Below.isel(year=i).item() / da.member.size) *100
        Yearly_percentage_Below.append(percentage)
    
    
    Yearly_percentage_Above = []
    
    
    for i in range(Yearly_Counts_Above.sizes['year']):
        percentage = (Yearly_Counts_Above.isel(year=i).item() / da.member.size) *100
        Yearly_percentage_Above.append(percentage)
        
    Yearly_percentage_Between = []
    
    
    for i in range(Yearly_Counts_Between.sizes['year']):
        percentage = (Yearly_Counts_Between.isel(year=i).item() / da.member.size) *100
        Yearly_percentage_Between.append(percentage)
        
    RFA_obs = obs
    
    RFA_upper_obs = np.percentile(RFA_obs, 66.66666)
    RFA_lower_obs = np.percentile(RFA_obs, 33.33333)
    
    RFANP = np.array(RFA_obs)
    RFANP[RFANP>RFA_upper_obs]= 3
    RFANP[RFANP<RFA_lower_obs]= 1
    RFANP[(RFANP<RFA_upper_obs)&(RFANP>RFA_lower_obs)]= 2
    
    RFA_Catagories = RFANP 

    ##FOR ABOVE 

    if state == "above":
        thresholds = np.arange(0, 110, 20)
        observed = RFA_Catagories
        forecast = Yearly_percentage_Above
        years = np.arange(1993, 2017)
        
        # Create a result matrix: rows = years, columns = thresholds
        result_matrix_hits = np.zeros((len(observed), len(thresholds)), dtype=int)
        result_matrix_false = np.zeros((len(observed), len(thresholds)), dtype=int)
        
        # Fill the matrix
        for i, threshold in enumerate(thresholds):
            result_matrix_hits[:, i] = ((forecast >= threshold) & (observed == 3)).astype(int)
            result_matrix_false[:, i] = ((forecast >= threshold) & (observed != 3)).astype(int)
        
        # Count 1s in each column
        column_counts_hits = np.sum(result_matrix_hits, axis=0)
        column_counts_false = np.sum(result_matrix_false, axis=0)

        Occurances = (np.count_nonzero(observed == 3))
        Non_Occurances = (np.count_nonzero(observed != 3))

        Hitrates = column_counts_hits/Occurances
        FAR = column_counts_false/Non_Occurances

        return Hitrates, FAR
        
    if state == "below":
        thresholds = np.arange(0, 110, 20)
        observed = RFA_Catagories
        forecast = Yearly_percentage_Below
        years = np.arange(1993, 2017)
        
        # Create a result matrix: rows = years, columns = thresholds
        result_matrix_hits = np.zeros((len(observed), len(thresholds)), dtype=int)
        result_matrix_false = np.zeros((len(observed), len(thresholds)), dtype=int)
        
        # Fill the matrix
        for i, threshold in enumerate(thresholds):
            result_matrix_hits[:, i] = ((forecast >= threshold) & (observed == 1)).astype(int)
            result_matrix_false[:, i] = ((forecast >= threshold) & (observed != 1)).astype(int)
        
        # Count 1s in each column
        column_counts_hits = np.sum(result_matrix_hits, axis=0)
        column_counts_false = np.sum(result_matrix_false, axis=0)

        Occurances = (np.count_nonzero(observed == 1))
        Non_Occurances = (np.count_nonzero(observed != 1))

        Hitrates = column_counts_hits/Occurances
        FAR = column_counts_false/Non_Occurances

        return Hitrates, FAR
    if state == "average":
        thresholds = np.arange(0, 110, 20)
        observed = RFA_Catagories
        forecast = Yearly_percentage_Between
        years = np.arange(1993, 2017)
        
        # Create a result matrix: rows = years, columns = thresholds
        result_matrix_hits = np.zeros((len(observed), len(thresholds)), dtype=int)
        result_matrix_false = np.zeros((len(observed), len(thresholds)), dtype=int)
        
        # Fill the matrix
        for i, threshold in enumerate(thresholds):
            result_matrix_hits[:, i] = ((forecast >= threshold) & (observed == 2)).astype(int)
            result_matrix_false[:, i] = ((forecast >= threshold) & (observed != 2)).astype(int)
        
        # Count 1s in each column
        column_counts_hits = np.sum(result_matrix_hits, axis=0)
        column_counts_false = np.sum(result_matrix_false, axis=0)

        Occurances = (np.count_nonzero(observed == 2))
        Non_Occurances = (np.count_nonzero(observed != 2))

        Hitrates = column_counts_hits/Occurances
        FAR = column_counts_false/Non_Occurances

        return Hitrates, FAR


def probs(da, obs, state):
    RFA_upper = np.percentile(da, 66.66666)
    RFA_lower = np.percentile(da, 33.33333)

    Yearly_Forecast_member_below = []
    Yearly_Forecast_member_above = []
    Yearly_Forecast_member_between = []

    for i in range(da.sizes['year']):
        data = da.isel(year=i)
        cat_0_mask = data < RFA_lower
        Yearly_Forecast_member_below.append(cat_0_mask)
        cat_1_mask = data > RFA_upper
        Yearly_Forecast_member_above.append(cat_1_mask)
        cat_2_mask = (data >= RFA_lower) & (data <= RFA_upper)
        Yearly_Forecast_member_between.append(cat_2_mask)

    Yearly_Forecast_below = xr.concat(Yearly_Forecast_member_below, dim='year')
    Yearly_Forecast_above = xr.concat(Yearly_Forecast_member_above, dim='year')
    Yearly_Forecast_between = xr.concat(Yearly_Forecast_member_between, dim='year')

    Yearly_Counts_Below = Yearly_Forecast_below.sum(dim="member")
    Yearly_Counts_Above = Yearly_Forecast_above.sum(dim="member")
    Yearly_Counts_Between = Yearly_Forecast_between.sum(dim="member")

    Yearly_percentage_Below = [
        (Yearly_Counts_Below.isel(year=i).item() / da.sizes['member']) * 100
        for i in range(Yearly_Counts_Below.sizes['year'])
    ]

    Yearly_percentage_Above = [
        (Yearly_Counts_Above.isel(year=i).item() / da.sizes['member']) * 100
        for i in range(Yearly_Counts_Above.sizes['year'])
    ]

    Yearly_percentage_Between = [
        (Yearly_Counts_Between.isel(year=i).item() / da.sizes['member']) * 100
        for i in range(Yearly_Counts_Between.sizes['year'])
    ]

    RFA_obs = obs
    RFA_upper_obs = np.percentile(RFA_obs, 66.66666)
    RFA_lower_obs = np.percentile(RFA_obs, 33.33333)

    RFANP = np.array(RFA_obs)
    RFANP[RFANP > RFA_upper_obs] = 3
    RFANP[RFANP < RFA_lower_obs] = 1
    RFANP[(RFANP <= RFA_upper_obs) & (RFANP >= RFA_lower_obs)] = 2

    RFA_Catagories = RFANP

    thresholds_l = 30
    thresholds_h = 40

    if state == "above":
        forecast = np.array(Yearly_percentage_Above)
        observed = RFA_Catagories
    elif state == "below":
        forecast = np.array(Yearly_percentage_Below)
        observed = RFA_Catagories
    elif state == "average":
        forecast = np.array(Yearly_percentage_Between)
        observed = RFA_Catagories
    else:
        raise ValueError("Invalid state. Choose from 'above', 'below', or 'average'.")

    category_map = {'above': 3, 'below': 1, 'average': 2}
    result_matrix_lower_true = ((forecast <= thresholds_l) & (observed == category_map[state])).astype(int)
    result_matrix_higher_true = ((forecast >= thresholds_h) & (observed == category_map[state])).astype(int)
    result_matrix_lower_false = (forecast <= thresholds_l).astype(int)
    result_matrix_higher_false = (forecast >= thresholds_h).astype(int)

    column_counts_lower_true = np.sum(result_matrix_lower_true)
    column_counts_higher_true = np.sum(result_matrix_higher_true)
    column_counts_lower_false = np.sum(result_matrix_lower_false)
    column_counts_higher_false = np.sum(result_matrix_higher_false)

    Hitrates = column_counts_lower_true / column_counts_lower_false if column_counts_lower_false != 0 else np.nan
    FAR = column_counts_higher_true / column_counts_higher_false if column_counts_higher_false != 0 else np.nan

    return Hitrates, FAR, column_counts_higher_false, column_counts_lower_false




# def probs(da,obs,state): 
#     RFA_upper = np.percentile(da, 66.66666)
#     RFA_lower = np.percentile(da, 33.33333)
    
#     Yearly_Forecast_member_below = []
#     Yearly_Forecast_member_above= []
#     Yearly_Forecast_member_between = []
    
#     for i in range(da.sizes['year']):
#              data = da.isel(year=i)
#              cat_0_mask = data < RFA_lower
#              Yearly_Forecast_member_below.append(cat_0_mask)
#              cat_1_mask = data > RFA_upper
#              Yearly_Forecast_member_above.append(cat_1_mask)
#              cat_2_mask = (data >= RFA_lower) & (data <= RFA_upper)
#              Yearly_Forecast_member_between.append(cat_2_mask)
      
#     Yearly_Forecast_below= xr.concat(Yearly_Forecast_member_below, dim='year')
#     Yearly_Forecast_above= xr.concat(Yearly_Forecast_member_above, dim='year')
#     Yearly_Forecast_between= xr.concat(Yearly_Forecast_member_between, dim='year')
    
#     Yearly_Counts_Below = Yearly_Forecast_below.sum(dim="member")
#     Yearly_Counts_Above = Yearly_Forecast_above.sum(dim="member")
#     Yearly_Counts_Between = Yearly_Forecast_between.sum(dim="member")
    
     
#     Yearly_percentage_Below = []
    
    
#     for i in range(Yearly_Counts_Below.sizes['year']):
#         percentage = (Yearly_Counts_Below.isel(year=i).item() / da.member.size) *100
#         Yearly_percentage_Below.append(percentage)
    
    
#     Yearly_percentage_Above = []
    
    
#     for i in range(Yearly_Counts_Above.sizes['year']):
#         percentage = (Yearly_Counts_Above.isel(year=i).item() / da.member.size) *100
#         Yearly_percentage_Above.append(percentage)
        
#     Yearly_percentage_Between = []
    
    
#     for i in range(Yearly_Counts_Between.sizes['year']):
#         percentage = (Yearly_Counts_Between.isel(year=i).item() / da.member.size) *100
#         Yearly_percentage_Between.append(percentage)
        
#     RFA_obs = obs
    
#     RFA_upper_obs = np.percentile(RFA_obs, 66.66666)
#     RFA_lower_obs = np.percentile(RFA_obs, 33.33333)
    
#     RFANP = np.array(RFA_obs)
#     RFANP[RFANP>RFA_upper_obs]= 3
#     RFANP[RFANP<RFA_lower_obs]= 1
#     RFANP[(RFANP<RFA_upper_obs)&(RFANP>RFA_lower_obs)]= 2
    
#     RFA_Catagories = RFANP 

#     ##FOR ABOVE 

#     if state == "above":
#         thresholds_l = 30
#         thresholds_h = 40
        
#         observed = RFA_Catagories
#         forecast = Yearly_percentage_Above
#         years = np.arange(1993, 2017)
        
#         # Create a result matrix: rows = years, columns = thresholds
#         result_matrix_higher_true = np.zeros((len(observed),), dtype=int)
#         result_matrix_lower_true = np.zeros((len(observed),), dtype=int)
#         result_matrix_higher_false = np.zeros((len(observed),), dtype=int)
#         result_matrix_lower_false = np.zeros((len(observed),), dtype=int)
        
        
#         # Fill the matrix
#         result_matrix_lower_true = ((forecast <= thresholds_l) & (observed == 3)).astype(int)
#         result_matrix_higher_true = ((forecast >= thresholds_h) & (observed == 3)).astype(int)
#         result_matrix_lower_false= ((forecast <= thresholds_l)).astype(int)
#         result_matrix_higher_false = ((forecast >= thresholds_h)).astype(int)
        
#         # Count 1s in each column
#         column_counts_lower_true = np.sum(result_matrix_lower_true, axis=0)
#         column_counts_higher_true = np.sum(result_matrix_higher_true, axis=0)
#         column_counts_lower_false = np.sum(result_matrix_lower_false, axis=0)
#         column_counts_higher_false = np.sum(result_matrix_higher_false, axis=0)

#         Hitrates = column_counts_lower_true/column_counts_lower_false
#         FAR = column_counts_higher_true/column_counts_higher_false

#         return Hitrates, FAR, column_counts_higher_false, column_counts_lower_false
        
#     if state == "below":
#         thresholds_l = 30
#         thresholds_h = 40
        
#         observed = RFA_Catagories
#         forecast = Yearly_percentage_Below
#         years = np.arange(1993, 2017)
        
#         # Create a result matrix: rows = years, columns = thresholds
#         result_matrix_higher_true = np.zeros((len(observed),), dtype=int)
#         result_matrix_lower_true = np.zeros((len(observed),), dtype=int)
#         result_matrix_higher_false = np.zeros((len(observed),), dtype=int)
#         result_matrix_lower_false = np.zeros((len(observed),), dtype=int)
        
        
#         # Fill the matrix
#         result_matrix_lower_true= ((forecast <= thresholds_l) & (observed == 1)).astype(int)
#         result_matrix_higher_true= ((forecast >= thresholds_h) & (observed == 1)).astype(int)
#         result_matrix_lower_false= ((forecast <= thresholds_l)).astype(int)
#         result_matrix_higher_false= ((forecast >= thresholds_h)).astype(int)
        
#         # Count 1s in each column
#         column_counts_lower_true = np.sum(result_matrix_lower_true, axis=0)
#         column_counts_higher_true = np.sum(result_matrix_higher_true, axis=0)
#         column_counts_lower_false = np.sum(result_matrix_lower_false, axis=0)
#         column_counts_higher_false = np.sum(result_matrix_higher_false, axis=0)

#         Hitrates = column_counts_lower_true/column_counts_lower_false
#         FAR = column_counts_higher_true/column_counts_higher_false

#         return Hitrates, FAR, column_counts_higher_false, column_counts_lower_false

#         return Hitrates, FAR
#     if state == "average":
#         thresholds_l = 30
#         thresholds_h = 40
        
#         observed = RFA_Catagories
#         forecast = Yearly_percentage_Between
#         years = np.arange(1993, 2017)
        
#         # Create a result matrix: rows = years, columns = thresholds
#         result_matrix_higher_true = np.zeros((len(observed),), dtype=int)
#         result_matrix_lower_true = np.zeros((len(observed),), dtype=int)
#         result_matrix_higher_false = np.zeros((len(observed),), dtype=int)
#         result_matrix_lower_false = np.zeros((len(observed),), dtype=int)
        
        
#         # Fill the matrix
        
#         result_matrix_lower_true = ((forecast <= thresholds_l) & (observed == 2)).astype(int)
#         result_matrix_higher_true = ((forecast >= thresholds_h) & (observed == 2)).astype(int)
#         result_matrix_lower_false= ((forecast <= thresholds_l)).astype(int)
#         result_matrix_higher_false = ((forecast >= thresholds_h)).astype(int)
        
#         # Count 1s in each column
#         column_counts_lower_true = np.sum(result_matrix_lower_true, axis=0)
#         column_counts_higher_true = np.sum(result_matrix_higher_true, axis=0)
#         column_counts_lower_false = np.sum(result_matrix_lower_false, axis=0)
#         column_counts_higher_false = np.sum(result_matrix_higher_false, axis=0)

#         Hitrates = column_counts_lower_true/column_counts_lower_false
#         FAR = column_counts_higher_true/column_counts_higher_false

#         return Hitrates, FAR, column_counts_higher_false, column_counts_lower_false


# In[12]:




# In[ ]:




